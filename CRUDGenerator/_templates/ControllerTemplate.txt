using Microsoft.AspNetCore.Mvc;
using CRUDGenerator.Interfaces;
using CRUDGenerator.Contracts;
using CRUDGenerator.Models;

namespace CRUDGenerator.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class {{Table}}Controller : ControllerBase
    {
        private readonly I{{Table}}Services _{{Table}}Services;

        public {{Table}}Controller(I{{Table}}Services {{Table}}Services)
        {
            _{{Table}}Services = {{Table}}Services;
        }
        [HttpPost]
        public async Task<IActionResult> Create{{Table}}Async({{Table}}Request request)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                await _{{Table}}Services.CreateAsync(request);
                return Ok(new { message = "Elemento creado exitosamente" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Ocurrió un error al crear el elemento", error = ex.Message });
            }
        }

        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                var {{Table}} = (List<{{Table}}>)_{{Table}}Services.GetAll();
                if ({{Table}} == null || !{{Table}}.Any())
                {
                    return Ok(new { message = "No se encontraron elementos" });
                }
                return Ok(new { message = "Elementos recuperados exitosamente", data = {{Table}} });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Ocurrió un error al recuperar todos los elementos", error = ex.Message });
            }
        }

        [HttpGet("{{{PK}}:{{PKType}}}")]
        public async Task<IActionResult> GetByIdAsync({{PKType}} {{PK}})
        {
            try
            {
                var {{Table}} = ({{Table}})await _{{Table}}Services.GetByIdAsync({{PK}});
                if ({{Table}} == null)
                {
                    return NotFound(new { message = $"No se encontró el elemento con {{PK}} {{{PK}}}." });
                }
                return Ok(new { message = $"Elemento con {{PK}} {{{PK}}} recuperado exitosamente.", data = {{Table}} });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Ocurrió un error al recuperar el elemento con {{PK}} {{{PK}}}.", error = ex.Message });
            }
        }
        [HttpPut("{{{PK}}:{{PKType}}}")]

        public async Task<IActionResult> Update{{Table}}Async({{PKType}} {{PK}}, {{Table}}Request request)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                var {{Table}} = await _{{Table}}Services.GetByIdAsync({{PK}});
                if ({{Table}} == null)
                {
                    return NotFound(new { message = $"Elemento con {{PK}} {{{PK}}} no encontrado" });
                }
                await _{{Table}}Services.UpdateAsync({{PK}}, request);
                return Ok(new { message = $"Elemento con {{PK}} {{{PK}}} actualizado exitosamente" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Ocurrió un error al actualizar el elemento con id {{{PK}}}", error = ex.Message });
            }
        }

        [HttpDelete("{{{PK}}:{{PKType}}}")]
        public async Task<IActionResult> Delete{{Table}}Async({{PKType}} {{PK}})
        {
            try
            {
                await _{{Table}}Services.DeleteAsync({{PK}});
                return Ok(new { message = $"Elemento con {{PK}} {{{PK}}} eliminado exitosamente" });

            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Ocurrió un error al eliminar el elemento con {{PK}} {{{PK}}}", error = ex.Message });

            }
        }
    }
}